From fcb48d57e6ca2545e88ff6c4e059f1bf2821e307 Mon Sep 17 00:00:00 2001
From: Leandro Lucarella <leandro.lucarella@sociomantic.com>
Date: Thu, 14 Sep 2017 15:20:16 +0200
Subject: [PATCH 3/5] Make coverage reports configurable via --DRT-covopt

The coverage module has a couple of options that can be set through some
weirdly looking dmd_coverSetMerge(), dmd_coverSourcePath() and
dmd_coverDestPath() functions (I guess the dmd prefix comes from
pre-druntime times).

These options don't only use non standard names, they also don't use the
standard --DRT-xxx / DRT_XXX runtime options passing mechanism, and they
can only be overridden in code.

This commit plugs the runtime options mechanism and adds support to set
these options via --DRT-covopt (and matching environment variables),
providing the sub-options merge, dstpath and srcpath.

The old functions are kept for backwards compatibility (they are used by
DMD itself for example), but should probably be removed in some distant
future.
---
 changelog/covopts.dd | 13 +++++++++++++
 src/rt/cover.d       | 44 ++++++++++++++++++++++++++++++++++++++------
 2 files changed, 51 insertions(+), 6 deletions(-)
 create mode 100644 changelog/covopts.dd

diff --git a/changelog/covopts.dd b/changelog/covopts.dd
new file mode 100644
index 00000000..d3e2aecb
--- /dev/null
+++ b/changelog/covopts.dd
@@ -0,0 +1,13 @@
+The runtime learned a few new options to customize how coverage reports are created.
+
+The format is the same as with the GC but using `covopt` as suffix, for example
+you can pass options separating them with spaces like `--DRT-covopt "merge:1
+dstpath:/tmp"`.
+
+These are the currently accepted options:
+
+$(DL
+  $(DT merge) $(DD Merge the current run with existing reports if 1, or overwrite the existing reports if 0.)
+  $(DT srcpath) $(DD Set path to where source files are located.)
+  $(DT dstpath) $(DD Set path to where listing files are to be written.)
+)
diff --git a/src/rt/cover.d b/src/rt/cover.d
index b6a8268b..82e0ed05 100644
--- a/src/rt/cover.d
+++ b/src/rt/cover.d
@@ -24,6 +24,7 @@ private
     import core.stdc.stdio;
     import core.stdc.stdlib;
     import rt.util.utf;
+    import core.internal.parseoptions;
 
     struct BitArray
     {
@@ -57,9 +58,35 @@ private
     __gshared
     {
         Cover[] gdata;
+        Config config;
+    }
+
+    struct Config
+    {
         string  srcpath;
         string  dstpath;
         bool    merge;
+
+    @nogc nothrow:
+
+        bool initialize()
+        {
+            return initConfigOptions(this, this.errorName);
+        }
+
+        void help()
+        {
+            string s = "Code coverage options are specified as white space separated assignments:
+    merge:0|1      - 0 overwrites existing reports, 1 merges current run with existing coverage reports (default: %d)
+    dstpath:<PATH> - write code coverage reports to <PATH> (default: current
+            working directory)
+    srcpath:<PATH> - set the path where the source files are located to <PATH>
+    (defaul: current working directory)
+";
+            printf(s.ptr, merge);
+        }
+
+        string errorName() { return "covopt"; }
     }
 }
 
@@ -72,7 +99,7 @@ private
  */
 extern (C) void dmd_coverSourcePath( string pathname )
 {
-    srcpath = pathname;
+    config.srcpath = pathname;
 }
 
 
@@ -84,7 +111,7 @@ extern (C) void dmd_coverSourcePath( string pathname )
  */
 extern (C) void dmd_coverDestPath( string pathname )
 {
-    dstpath = pathname;
+    config.dstpath = pathname;
 }
 
 
@@ -97,7 +124,7 @@ extern (C) void dmd_coverDestPath( string pathname )
  */
 extern (C) void dmd_coverSetMerge( bool flag )
 {
-    merge = flag;
+    config.merge = flag;
 }
 
 
@@ -149,6 +176,11 @@ uint parseNum(const(char)[] s)
 T min(T)(T a, T b) { return a < b ? a : b; }
 T max(T)(T a, T b) { return b < a ? a : b; }
 
+shared static this()
+{
+    config.initialize();
+}
+
 shared static ~this()
 {
     if (!gdata.length) return;
@@ -161,14 +193,14 @@ shared static ~this()
 
     foreach (c; gdata)
     {
-        auto fname = appendFN(dstpath, addExt(baseName(c.filename), "lst"));
+        auto fname = appendFN(config.dstpath, addExt(baseName(c.filename), "lst"));
         auto flst = openOrCreateFile(fname);
         if (flst is null)
             continue;
         lockFile(fileno(flst)); // gets unlocked by fclose
         scope(exit) fclose(flst);
 
-        if (merge && readFile(flst, buf))
+        if (config.merge && readFile(flst, buf))
         {
             splitLines(buf, lines);
 
@@ -176,7 +208,7 @@ shared static ~this()
                 c.data[i] += parseNum(line);
         }
 
-        if (!readFile(appendFN(srcpath, c.filename), buf))
+        if (!readFile(appendFN(config.srcpath, c.filename), buf))
             continue;
         splitLines(buf, lines);
 
-- 
2.16.1

