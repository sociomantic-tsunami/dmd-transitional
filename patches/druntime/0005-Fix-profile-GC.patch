From 9e750a7ccc5a3562c89e96e9ab961eb641bb900a Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 13:00:25 +0200
Subject: [PATCH 1/9] Extend GC stats with resettable thread-local counter

---
 src/core/memory.d             | 11 +++++++++++
 src/gc/gcinterface.d          |  5 +++++
 src/gc/impl/conservative/gc.d | 11 +++++++++++
 src/gc/impl/manual/gc.d       |  4 ++++
 src/gc/proxy.d                |  5 +++++
 5 files changed, 36 insertions(+)

diff --git a/src/core/memory.d b/src/core/memory.d
index 3a8ad96..5e2c5cc 100644
--- a/src/core/memory.d
+++ b/src/core/memory.d
@@ -139,6 +139,7 @@ private

     extern (C) BlkInfo_ gc_query( void* p ) pure nothrow;
     extern (C) GC.Stats gc_stats ( ) nothrow @nogc;
+    extern (C) void gc_resetThreadLocalStats() nothrow @nogc;

     extern (C) void gc_addRoot( in void* p ) nothrow @nogc;
     extern (C) void gc_addRange( in void* p, size_t sz, const TypeInfo ti = null ) nothrow @nogc;
@@ -172,6 +173,9 @@ struct GC
         size_t usedSize;
         /// number of free bytes on the GC heap (might only get updated after a collection)
         size_t freeSize;
+        /// number of bytes allocates for current thread since program start or
+        /// call to `GC.resetThreadLocalStats()`
+        size_t allocatedInCurrentThread;
     }

     /**
@@ -684,6 +688,13 @@ struct GC
         return gc_stats();
     }

+    /**
+     */
+    static void resetThreadLocalStats() nothrow
+    {
+        gc_resetThreadLocalStats();
+    }
+
     /**
      * Adds an internal root pointing to the GC memory block referenced by p.
      * As a result, the block referenced by p itself and any blocks accessible
diff --git a/src/gc/gcinterface.d b/src/gc/gcinterface.d
index 8f4f0bf..14083cb 100644
--- a/src/gc/gcinterface.d
+++ b/src/gc/gcinterface.d
@@ -191,5 +191,10 @@ interface GC
      */
     bool inFinalizer() nothrow;

+    /*
+     *
+     */
+    void resetThreadLocalStats() nothrow @nogc;
+
     void monitor(begin_del begin, end_del end);
 }
diff --git a/src/gc/impl/conservative/gc.d b/src/gc/impl/conservative/gc.d
index f8a0867..b760089 100644
--- a/src/gc/impl/conservative/gc.d
+++ b/src/gc/impl/conservative/gc.d
@@ -122,6 +122,9 @@ __gshared long extendTime;
 __gshared long otherTime;
 __gshared long lockTime;

+// thread-local counter
+size_t bytesAllocated;
+
 private
 {
     extern (C)
@@ -524,7 +527,9 @@ class ConservativeGC : GC
             sentinel_init(p, size);
             alloc_size = size;
         }
+
         gcx.log_malloc(p, size);
+        .bytesAllocated += size;

         return p;
     }
@@ -1227,6 +1232,12 @@ class ConservativeGC : GC

         stats.usedSize -= freeListSize;
         stats.freeSize += freeListSize;
+        stats.allocatedInCurrentThread = .bytesAllocated;
+    }
+
+    void resetThreadLocalStats() nothrow @nogc
+    {
+        .bytesAllocated = 0;
     }

     void monitor(begin_del begin, end_del end)
diff --git a/src/gc/impl/manual/gc.d b/src/gc/impl/manual/gc.d
index f7755a4..bd902c2 100644
--- a/src/gc/impl/manual/gc.d
+++ b/src/gc/impl/manual/gc.d
@@ -272,6 +272,10 @@ class ManualGC : GC
         return false;
     }

+    void resetThreadLocalStats() nothrow @nogc
+    {
+    }
+
     void monitor(begin_del begin, end_del end)
     {
     }
diff --git a/src/gc/proxy.d b/src/gc/proxy.d
index 0177a5a..8ca9063 100644
--- a/src/gc/proxy.d
+++ b/src/gc/proxy.d
@@ -197,6 +197,11 @@ extern (C)
         return instance.inFinalizer();
     }

+    void gc_resetThreadLocalStats() nothrow @nogc
+    {
+        return instance.resetThreadLocalStats();
+    }
+
     void gc_monitor(begin_del begin, end_del end)
     {
         return instance.monitor(begin, end);
--
2.18.0


From b226959084f99b13f1d958d80518413a10f65a51 Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 13:00:25 +0200
Subject: [PATCH 2/9] Replace manual trace printfs with a mixin

Intermediate step for generating tracegc handlers automatically intended
to simplify reviewing by reducing size of each individual diff.
---
 src/rt/tracegc.d | 287 +++++++----------------------------------------
 1 file changed, 41 insertions(+), 246 deletions(-)

diff --git a/src/rt/tracegc.d b/src/rt/tracegc.d
index 708ca34..8845dd9 100644
--- a/src/rt/tracegc.d
+++ b/src/rt/tracegc.d
@@ -13,7 +13,7 @@

 module rt.tracegc;

-//version = tracegc;
+// version = tracegc;

 import rt.profilegc;

@@ -91,65 +91,47 @@ extern (C) void[] _d_newarraymiTX(const TypeInfo ti, size_t[] dims);
 extern (C) void* _d_newitemT(in TypeInfo _ti);
 extern (C) void* _d_newitemiT(in TypeInfo _ti);

-extern (C) Object _d_newclassTrace(string file, int line, string funcname, const ClassInfo ci)
+private string generatePrintf ( )
 {
     version (tracegc)
     {
-        printf("_d_newclassTrace class = %s file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ci.name,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
+        return q{
+            printf("%s file = '%.*s' line = %d function = '%.*s'\n",
+                __FUNCTION__.ptr,
+                file.length, file.ptr,
+                line,
+                funcname.length, funcname.ptr
+                );
+        };
     }
+    else
+        return "";
+}
+
+extern (C) Object _d_newclassTrace(string file, int line, string funcname, const ClassInfo ci)
+{
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ci.name, ci.initializer.length);
     return _d_newclass(ci);
 }

 extern (C) void[] _d_newarrayTTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
 {
-    version (tracegc)
-    {
-        printf("_d_newarrayTTrace type = %s length = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.tsize * length);
     return _d_newarrayT(ti, length);
 }

 extern (C) void[] _d_newarrayiTTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
 {
-    version (tracegc)
-    {
-        printf("_d_newarrayiTTrace type = %s length = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.tsize * length);
     return _d_newarrayiT(ti, length);
 }

 extern (C) void[] _d_newarraymTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t[] dims)
 {
-    version (tracegc)
-    {
-        printf("_d_newarraymTXTrace type = %s dims = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)dims.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     size_t n = 1;
     foreach (dim; dims)
         n *= dim;
@@ -159,16 +141,7 @@ extern (C) void[] _d_newarraymTXTrace(string file, int line, string funcname, co

 extern (C) void[] _d_newarraymiTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t[] dims)
 {
-    version (tracegc)
-    {
-        printf("_d_newarraymiTXTrace type = %s dims = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)dims.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     size_t n = 1;
     foreach (dim; dims)
         n *= dim;
@@ -178,30 +151,14 @@ extern (C) void[] _d_newarraymiTXTrace(string file, int line, string funcname, c

 extern (C) void* _d_newitemTTrace(string file, int line, string funcname, in TypeInfo ti)
 {
-    version (tracegc)
-    {
-        printf("_d_newitemTTrace type = %s file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.tsize);
     return _d_newitemT(ti);
 }

 extern (C) void* _d_newitemiTTrace(string file, int line, string funcname, in TypeInfo ti)
 {
-    version (tracegc)
-    {
-        printf("_d_newitemiTTrace type = %s file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.tsize);
     return _d_newitemiT(ti);
 }
@@ -217,101 +174,43 @@ extern (C) void _d_delmemory(void* *p);

 extern (C) void _d_callfinalizerTrace(string file, int line, string funcname, void* p)
 {
-    version (tracegc)
-    {
-        printf("_d_callfinalizerTrace %p file = '%.*s' line = %d function = '%.*s'\n",
-            p,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_callfinalizer(p);
 }

 extern (C) void _d_callinterfacefinalizerTrace(string file, int line, string funcname, void *p)
 {
-    version (tracegc)
-    {
-        printf("_d_callinterfacefinalizerTrace %p file = '%.*s' line = %d function = '%.*s'\n",
-            p,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_callinterfacefinalizer(p);
 }

 extern (C) void _d_delclassTrace(string file, int line, string funcname, Object* p)
 {
-    version (tracegc)
-    {
-        printf("_d_delclassTrace %p file = '%.*s' line = %d function = '%.*s'\n",
-            *p,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_delclass(p);
 }

 extern (C) void _d_delinterfaceTrace(string file, int line, string funcname, void** p)
 {
-    version (tracegc)
-    {
-        printf("_d_delinterfaceTrace %p file = '%.*s' line = %d function = '%.*s'\n",
-            *p,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_delinterface(p);
 }

 extern (C) void _d_delstructTrace(string file, int line, string funcname, void** p, TypeInfo_Struct inf)
 {
-    version (tracegc)
-    {
-        printf("_d_delstructTrace %p type = %s file = '%.*s' line = %d function = '%.*s'\n",
-            *p,
-            cast(char *)inf.toString().ptr,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_delstruct(p, inf);
 }

 extern (C) void _d_delarray_tTrace(string file, int line, string funcname, void[]* p, const TypeInfo_Struct ti)
 {
-    version (tracegc)
-    {
-        printf("_d_delarray_tTrace %p[%llu] type = %s file = '%.*s' line = %d function = '%.*s'\n",
-            (*p).ptr, cast(ulong)(*p).length,
-            ti ? cast(char *)ti.toString().ptr : cast(char*)"".ptr,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_delarray_t(p, ti);
 }

 extern (C) void _d_delmemoryTrace(string file, int line, string funcname, void* *p)
 {
-    version (tracegc)
-    {
-        printf("_d_delmemoryTrace %p file = '%.*s' line = %d function = '%.*s'\n",
-            *p,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     _d_delmemory(p);
 }

@@ -321,16 +220,7 @@ extern (C) void* _d_assocarrayliteralTX(const TypeInfo_AssociativeArray ti, void

 extern (C) void* _d_arrayliteralTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
 {
-    version (tracegc)
-    {
-        printf("_d_arrayliteralTXTrace type = %s length = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.next.tsize * length);
     return _d_arrayliteralTX(ti, length);
 }
@@ -338,17 +228,7 @@ extern (C) void* _d_arrayliteralTXTrace(string file, int line, string funcname,
 extern (C) void* _d_assocarrayliteralTXTrace(string file, int line, string funcname,
         const TypeInfo_AssociativeArray ti, void[] keys, void[] vals)
 {
-    version (tracegc)
-    {
-        printf("_d_assocarrayliteralTXTrace type = %s keys = %llu values = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)keys.length,
-            cast(ulong)vals.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), (ti.key.tsize + ti.value.tsize) * keys.length);
     return _d_assocarrayliteralTX(ti, keys, vals);
 }
@@ -360,33 +240,14 @@ extern (C) void[] _d_arraycatnTX(const TypeInfo ti, byte[][] arrs);

 extern (C) byte[] _d_arraycatTTrace(string file, int line, string funcname, const TypeInfo ti, byte[] x, byte[] y)
 {
-    version (tracegc)
-    {
-        printf("_d_arraycatT type = %s x = %llu y = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)x.length,
-            cast(ulong)y.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), (x.length + y.length) * ti.next.tsize);
     return _d_arraycatT(ti, x, y);
 }

 extern (C) void[] _d_arraycatnTXTrace(string file, int line, string funcname, const TypeInfo ti, byte[][] arrs)
 {
-    version (tracegc)
-    {
-        printf("_d_arraycatnTX type = %s arrs = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)arrs.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     size_t length;
     foreach (b; arrs)
         length += b.length;
@@ -401,50 +262,21 @@ extern (C) void[] _d_arrayappendwd(ref byte[] x, dchar c);

 extern (C) void[] _d_arrayappendTTrace(string file, int line, string funcname, const TypeInfo ti, ref byte[] x, byte[] y)
 {
-    version (tracegc)
-    {
-        printf("_d_arrayappendT type = %s x = %llu y = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)x.length,
-            cast(ulong)y.length,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.next.tsize * y.length);
     return _d_arrayappendT(ti, x, y);
 }

 extern (C) byte[] _d_arrayappendcTXTrace(string file, int line, string funcname, const TypeInfo ti, ref byte[] px, size_t n)
 {
-    version (tracegc)
-    {
-        printf("_d_arrayappendcTX type = %s x = %llu n = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)px.length,
-            cast(ulong)n,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.next.tsize * n);
     return _d_arrayappendcTX(ti, px, n);
 }

 extern (C) void[] _d_arrayappendcdTrace(string file, int line, string funcname, ref byte[] x, dchar c)
 {
-    version (tracegc)
-    {
-        printf("_d_arrayappendcd x = %llu c = x%x file = '%.*s' line = %d function = '%.*s'\n",
-            cast(ulong)x.length,
-            c,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     size_t n;
     if (c <= 0x7F)
         n = 1;
@@ -462,16 +294,7 @@ extern (C) void[] _d_arrayappendcdTrace(string file, int line, string funcname,

 extern (C) void[] _d_arrayappendwdTrace(string file, int line, string funcname, ref byte[] x, dchar c)
 {
-    version (tracegc)
-    {
-        printf("_d_arrayappendwd x = %llu c = x%x file = '%.*s' line = %d function = '%.*s'\n",
-            cast(ulong)x.length,
-            c,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     size_t n = 1 + (c > 0xFFFF);
     accumulate(file, line, funcname, "wchar[]", n * wchar.sizeof);
     return _d_arrayappendwd(x, c);
@@ -482,34 +305,14 @@ extern (C) void[] _d_arraysetlengthiT(const TypeInfo ti, size_t newlength, void[

 extern (C) void[] _d_arraysetlengthTTrace(string file, int line, string funcname, const TypeInfo ti, size_t newlength, void[]* p)
 {
-    version (tracegc)
-    {
-        printf("_d_arraysetlengthT type = %s length = %llu newlength = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)(*p).length,
-            cast(ulong)newlength,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.next.tsize * newlength);
     return _d_arraysetlengthT(ti, newlength, p);
 }

 extern (C) void[] _d_arraysetlengthiTTrace(string file, int line, string funcname, const TypeInfo ti, size_t newlength, void[]* p)
 {
-    version (tracegc)
-    {
-        printf("_d_arraysetlengthiT type = %s length = %llu newlength = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(char *)ti.toString().ptr,
-            cast(ulong)(*p).length,
-            cast(ulong)newlength,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, ti.toString(), ti.next.tsize * newlength);
     return _d_arraysetlengthiT(ti, newlength, p);
 }
@@ -519,15 +322,7 @@ extern (C) void* _d_allocmemory(size_t sz);

 extern (C) void* _d_allocmemoryTrace(string file, int line, string funcname, size_t sz)
 {
-    version (tracegc)
-    {
-        printf("_d_allocmemory sz = %llu file = '%.*s' line = %d function = '%.*s'\n",
-            cast(ulong)sz,
-            file.length, file.ptr,
-            line,
-            funcname.length, funcname.ptr
-            );
-    }
+    mixin(generatePrintf());
     accumulate(file, line, funcname, "closure", sz);
     return _d_allocmemory(sz);
 }
--
2.18.0


From 75c90048c8f71549580b54f72095f948e6fdcb37 Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 13:00:25 +0200
Subject: [PATCH 3/9] Rework how -profile=gc stats are calculated

Replaces imprecise/wrong calculation based exclusively on checking
TypeInfo - now the data is retrieved directly from the GC and represents real
amount of bytes allocated.

Fix issue https://issues.dlang.org/show_bug.cgi?id=17294
Fix issue https://issues.dlang.org/show_bug.cgi?id=16280
Fix issue https://issues.dlang.org/show_bug.cgi?id=15481
---
 src/gc/impl/conservative/gc.d    |   2 +-
 src/rt/tracegc.d                 | 324 +++++++++++--------------------
 test/profile/bothgc.log.exp      |   2 +-
 test/profile/myprofilegc.log.exp |   2 +-
 4 files changed, 115 insertions(+), 215 deletions(-)

diff --git a/src/gc/impl/conservative/gc.d b/src/gc/impl/conservative/gc.d
index b760089..e7d92bd 100644
--- a/src/gc/impl/conservative/gc.d
+++ b/src/gc/impl/conservative/gc.d
@@ -529,7 +529,7 @@ class ConservativeGC : GC
         }

         gcx.log_malloc(p, size);
-        .bytesAllocated += size;
+        .bytesAllocated += alloc_size;

         return p;
     }
diff --git a/src/rt/tracegc.d b/src/rt/tracegc.d
index 8845dd9..0780410 100644
--- a/src/rt/tracegc.d
+++ b/src/rt/tracegc.d
@@ -15,10 +15,6 @@ module rt.tracegc;

 // version = tracegc;

-import rt.profilegc;
-
-version (tracegc) import core.stdc.stdio;
-
 version (none)
 {
     // this exercises each function
@@ -88,243 +84,147 @@ extern (C) void[] _d_newarrayT(const TypeInfo ti, size_t length);
 extern (C) void[] _d_newarrayiT(const TypeInfo ti, size_t length);
 extern (C) void[] _d_newarraymTX(const TypeInfo ti, size_t[] dims);
 extern (C) void[] _d_newarraymiTX(const TypeInfo ti, size_t[] dims);
-extern (C) void* _d_newitemT(in TypeInfo _ti);
-extern (C) void* _d_newitemiT(in TypeInfo _ti);
-
-private string generatePrintf ( )
-{
-    version (tracegc)
-    {
-        return q{
-            printf("%s file = '%.*s' line = %d function = '%.*s'\n",
-                __FUNCTION__.ptr,
-                file.length, file.ptr,
-                line,
-                funcname.length, funcname.ptr
-                );
-        };
-    }
-    else
-        return "";
-}
-
-extern (C) Object _d_newclassTrace(string file, int line, string funcname, const ClassInfo ci)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ci.name, ci.initializer.length);
-    return _d_newclass(ci);
-}
-
-extern (C) void[] _d_newarrayTTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.tsize * length);
-    return _d_newarrayT(ti, length);
-}
-
-extern (C) void[] _d_newarrayiTTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.tsize * length);
-    return _d_newarrayiT(ti, length);
-}
-
-extern (C) void[] _d_newarraymTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t[] dims)
-{
-    mixin(generatePrintf());
-    size_t n = 1;
-    foreach (dim; dims)
-        n *= dim;
-    accumulate(file, line, funcname, ti.toString(), ti.tsize * n);
-    return _d_newarraymTX(ti, dims);
-}
-
-extern (C) void[] _d_newarraymiTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t[] dims)
-{
-    mixin(generatePrintf());
-    size_t n = 1;
-    foreach (dim; dims)
-        n *= dim;
-    accumulate(file, line, funcname, ti.toString(), ti.tsize * n);
-    return _d_newarraymiTX(ti, dims);
-}
-
-extern (C) void* _d_newitemTTrace(string file, int line, string funcname, in TypeInfo ti)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.tsize);
-    return _d_newitemT(ti);
-}
-
-extern (C) void* _d_newitemiTTrace(string file, int line, string funcname, in TypeInfo ti)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.tsize);
-    return _d_newitemiT(ti);
-}
-
-
+extern (C) void* _d_newitemT(in TypeInfo ti);
+extern (C) void* _d_newitemiT(in TypeInfo ti);
 extern (C) void _d_callfinalizer(void* p);
 extern (C) void _d_callinterfacefinalizer(void *p);
 extern (C) void _d_delclass(Object* p);
 extern (C) void _d_delinterface(void** p);
 extern (C) void _d_delstruct(void** p, TypeInfo_Struct inf);
-extern (C) void _d_delarray_t(void[]* p, const TypeInfo_Struct ti);
+extern (C) void _d_delarray_t(void[]* p, const TypeInfo_Struct _);
 extern (C) void _d_delmemory(void* *p);
+extern (C) byte[] _d_arraycatT(const TypeInfo ti, byte[] x, byte[] y);
+extern (C) void[] _d_arraycatnTX(const TypeInfo ti, byte[][] arrs);
+extern (C) void* _d_arrayliteralTX(const TypeInfo ti, size_t length);
+extern (C) void* _d_assocarrayliteralTX(const TypeInfo_AssociativeArray ti,
+    void[] keys, void[] vals);
+extern (C) void[] _d_arrayappendT(const TypeInfo ti, ref byte[] x, byte[] y);
+extern (C) byte[] _d_arrayappendcTX(const TypeInfo ti, ref byte[] px, size_t n);
+extern (C) void[] _d_arrayappendcd(ref byte[] x, dchar c);
+extern (C) void[] _d_arrayappendwd(ref byte[] x, dchar c);
+extern (C) void[] _d_arraysetlengthT(const TypeInfo ti, size_t newlength, void[]* p);
+extern (C) void[] _d_arraysetlengthiT(const TypeInfo ti, size_t newlength, void[]* p);
+extern (C) void* _d_allocmemory(size_t sz);

-extern (C) void _d_callfinalizerTrace(string file, int line, string funcname, void* p)
-{
-    mixin(generatePrintf());
-    _d_callfinalizer(p);
-}
-
-extern (C) void _d_callinterfacefinalizerTrace(string file, int line, string funcname, void *p)
-{
-    mixin(generatePrintf());
-    _d_callinterfacefinalizer(p);
-}
-
-extern (C) void _d_delclassTrace(string file, int line, string funcname, Object* p)
-{
-    mixin(generatePrintf());
-    _d_delclass(p);
-}
-
-extern (C) void _d_delinterfaceTrace(string file, int line, string funcname, void** p)
-{
-    mixin(generatePrintf());
-    _d_delinterface(p);
-}
+// Used as wrapper function body to get actual stats. Calling `original_func()`
+// will call wrapped function with all required arguments.
+//
+// Placed here as a separate string constant to simplify maintenance as it is
+// much more likely to be modified than rest of generation code.
+enum accumulator = q{
+    import rt.profilegc : accumulate;
+    import core.memory : GC;
+
+    static if (is(typeof(ci)))
+        string name = ci.name;
+    else static if (is(typeof(ti)))
+        string name = ti.toString();
+    else static if (__FUNCTION__ == "rt.tracegc._d_arrayappendcdTrace")
+        string name = "char[]";
+    else static if (__FUNCTION__ == "rt.tracegc._d_arrayappendwdTrace")
+        string name = "wchar[]";
+    else static if (__FUNCTION__ == "rt.tracegc._d_allocmemoryTrace")
+        string name = "closure";
+    else
+        string name = "";

-extern (C) void _d_delstructTrace(string file, int line, string funcname, void** p, TypeInfo_Struct inf)
-{
-    mixin(generatePrintf());
-    _d_delstruct(p, inf);
-}
+    version(tracegc)
+    {
+        import core.stdc.stdio;
+
+        printf("%s file = '%.*s' line = %d function = '%.*s' type = %.*s\n",
+            __FUNCTION__.ptr,
+            file.length, file.ptr,
+            line,
+            funcname.length, funcname.ptr,
+            name.length, name.ptr
+        );
+    }

-extern (C) void _d_delarray_tTrace(string file, int line, string funcname, void[]* p, const TypeInfo_Struct ti)
-{
-    mixin(generatePrintf());
-    _d_delarray_t(p, ti);
-}
+    GC.resetThreadLocalStats();

-extern (C) void _d_delmemoryTrace(string file, int line, string funcname, void* *p)
-{
-    mixin(generatePrintf());
-    _d_delmemory(p);
-}
+    scope(exit)
+    {
+        size_t size = GC.stats().allocatedInCurrentThread;
+        if (size > 0)
+            accumulate(file, line, funcname, name, size);
+    }

+    return original_func();
+};

-extern (C) void* _d_arrayliteralTX(const TypeInfo ti, size_t length);
-extern (C) void* _d_assocarrayliteralTX(const TypeInfo_AssociativeArray ti, void[] keys, void[] vals);
+mixin(generateTraceWrappers());
+//pragma(msg, generateTraceWrappers());

-extern (C) void* _d_arrayliteralTXTrace(string file, int line, string funcname, const TypeInfo ti, size_t length)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.next.tsize * length);
-    return _d_arrayliteralTX(ti, length);
-}
+////////////////////////////////////////////////////////////////////////////////
+// code gen implementation

-extern (C) void* _d_assocarrayliteralTXTrace(string file, int line, string funcname,
-        const TypeInfo_AssociativeArray ti, void[] keys, void[] vals)
+private string generateTraceWrappers()
 {
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), (ti.key.tsize + ti.value.tsize) * keys.length);
-    return _d_assocarrayliteralTX(ti, keys, vals);
-}
-
+    string code;

+    foreach (name; __traits(allMembers, mixin(__MODULE__)))
+    {
+        static if (name.length > 3 && name[0..3] == "_d_")
+        {
+            mixin("alias Declaration = " ~ name ~ ";");
+            code ~= generateWrapper!Declaration();
+        }
+    }

-extern (C) byte[] _d_arraycatT(const TypeInfo ti, byte[] x, byte[] y);
-extern (C) void[] _d_arraycatnTX(const TypeInfo ti, byte[][] arrs);
-
-extern (C) byte[] _d_arraycatTTrace(string file, int line, string funcname, const TypeInfo ti, byte[] x, byte[] y)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), (x.length + y.length) * ti.next.tsize);
-    return _d_arraycatT(ti, x, y);
+    return code;
 }

-extern (C) void[] _d_arraycatnTXTrace(string file, int line, string funcname, const TypeInfo ti, byte[][] arrs)
+private string generateWrapper(alias Declaration)()
 {
-    mixin(generatePrintf());
-    size_t length;
-    foreach (b; arrs)
-        length += b.length;
-    accumulate(file, line, funcname, ti.toString(), length * ti.next.tsize);
-    return _d_arraycatnTX(ti, arrs);
-}
-
-extern (C) void[] _d_arrayappendT(const TypeInfo ti, ref byte[] x, byte[] y);
-extern (C) byte[] _d_arrayappendcTX(const TypeInfo ti, ref byte[] px, size_t n);
-extern (C) void[] _d_arrayappendcd(ref byte[] x, dchar c);
-extern (C) void[] _d_arrayappendwd(ref byte[] x, dchar c);
+    static size_t findParamIndex(string s)
+    {
+        assert (s[$-1] == ')');
+        size_t brackets = 1;
+        while (brackets != 0)
+        {
+            s = s[0 .. $-1];
+            if (s[$-1] == ')')
+                ++brackets;
+            if (s[$-1] == '(')
+                --brackets;
+        }
+
+        assert(s.length > 1);
+        return s.length - 1;
+    }

-extern (C) void[] _d_arrayappendTTrace(string file, int line, string funcname, const TypeInfo ti, ref byte[] x, byte[] y)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.next.tsize * y.length);
-    return _d_arrayappendT(ti, x, y);
-}
+    auto type_string = typeof(Declaration).stringof;
+    auto name = __traits(identifier, Declaration);
+    auto param_idx = findParamIndex(type_string);

-extern (C) byte[] _d_arrayappendcTXTrace(string file, int line, string funcname, const TypeInfo ti, ref byte[] px, size_t n)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.next.tsize * n);
-    return _d_arrayappendcTX(ti, px, n);
-}
+    auto new_declaration = type_string[0 .. param_idx] ~ " " ~ name
+        ~ "Trace(string file, int line, string funcname, "
+        ~ type_string[param_idx+1 .. $];
+    auto call_original = "    scope original_func = { return "
+        ~ __traits(identifier, Declaration) ~ "(" ~ Arguments!Declaration() ~ "); };";

-extern (C) void[] _d_arrayappendcdTrace(string file, int line, string funcname, ref byte[] x, dchar c)
-{
-    mixin(generatePrintf());
-    size_t n;
-    if (c <= 0x7F)
-        n = 1;
-    else if (c <= 0x7FF)
-        n = 2;
-    else if (c <= 0xFFFF)
-        n = 3;
-    else if (c <= 0x10FFFF)
-        n = 4;
-    else
-        assert(0);
-    accumulate(file, line, funcname, "char[]", n * char.sizeof);
-    return _d_arrayappendcd(x, c);
+    return new_declaration ~ "\n{\n" ~
+           call_original ~ "\n" ~
+           accumulator ~ "\n" ~
+           "}\n";
 }

-extern (C) void[] _d_arrayappendwdTrace(string file, int line, string funcname, ref byte[] x, dchar c)
+string Arguments(alias Func)()
 {
-    mixin(generatePrintf());
-    size_t n = 1 + (c > 0xFFFF);
-    accumulate(file, line, funcname, "wchar[]", n * wchar.sizeof);
-    return _d_arrayappendwd(x, c);
-}
+    string result = "";

-extern (C) void[] _d_arraysetlengthT(const TypeInfo ti, size_t newlength, void[]* p);
-extern (C) void[] _d_arraysetlengthiT(const TypeInfo ti, size_t newlength, void[]* p);
-
-extern (C) void[] _d_arraysetlengthTTrace(string file, int line, string funcname, const TypeInfo ti, size_t newlength, void[]* p)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.next.tsize * newlength);
-    return _d_arraysetlengthT(ti, newlength, p);
-}
+    static if (is(typeof(Func) PT == __parameters))
+    {
+        foreach (idx, _; PT)
+            result ~= __traits(identifier, PT[idx .. idx + 1]) ~ ", ";
+    }

-extern (C) void[] _d_arraysetlengthiTTrace(string file, int line, string funcname, const TypeInfo ti, size_t newlength, void[]* p)
-{
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, ti.toString(), ti.next.tsize * newlength);
-    return _d_arraysetlengthiT(ti, newlength, p);
+    return result;
 }

-
-extern (C) void* _d_allocmemory(size_t sz);
-
-extern (C) void* _d_allocmemoryTrace(string file, int line, string funcname, size_t sz)
+unittest
 {
-    mixin(generatePrintf());
-    accumulate(file, line, funcname, "closure", sz);
-    return _d_allocmemory(sz);
+    void foo(int x, double y) { }
+    static assert (Arguments!foo == "x, y, ");
 }
-
-
diff --git a/test/profile/bothgc.log.exp b/test/profile/bothgc.log.exp
index 6d389ad..884f24c 100644
--- a/test/profile/bothgc.log.exp
+++ b/test/profile/bothgc.log.exp
@@ -1,2 +1,2 @@
 bytes allocated, allocations, type, function, file:line
-           4000	           1000	both.Num both.foo src/both.d:15
+          16000	           1000	both.Num both.foo src/both.d:15
diff --git a/test/profile/myprofilegc.log.exp b/test/profile/myprofilegc.log.exp
index f2337d8..9d36ec5 100644
--- a/test/profile/myprofilegc.log.exp
+++ b/test/profile/myprofilegc.log.exp
@@ -1,2 +1,2 @@
 bytes allocated, allocations, type, function, file:line
-              4	              1	uint D main src/profilegc.d:6
+             16	              1	uint D main src/profilegc.d:6
--
2.18.0


From e71d0f33cf9c859386c83ff3f496c71ccd7e0ccb Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 13:00:25 +0200
Subject: [PATCH 4/9] Ensure consistent trace entry order

Ordering by name as last measure means order of lines in the generate trace
will be reproducible, allowing for easy test cases.
---
 src/rt/profilegc.d | 8 +++++++-
 1 file changed, 7 insertions(+), 1 deletion(-)

diff --git a/src/rt/profilegc.d b/src/rt/profilegc.d
index a5ec1a8..f84e1f3 100644
--- a/src/rt/profilegc.d
+++ b/src/rt/profilegc.d
@@ -117,10 +117,16 @@ shared static ~this()
         {
             auto result1 = cast(Result*)r1;
             auto result2 = cast(Result*)r2;
+
             ptrdiff_t cmp = result2.entry.size - result1.entry.size;
             if (cmp) return cmp < 0 ? -1 : 1;
             cmp = result2.entry.count - result1.entry.count;
-            return cmp < 0 ? -1 : (cmp > 0 ? 1 : 0);
+            if (cmp) return cmp < 0 ? -1 : 1;
+
+            if (result2.name == result1.name)
+                return 0;
+            // ascending order for names reads better
+            return result2.name > result1.name ? -1 : 1;
         }
     }

--
2.18.0


From b52cf2a29bd5c07e87dfeb60be4ebaf179769ccd Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 13:00:25 +0200
Subject: [PATCH 5/9] Enhance -profile=gc test case

Moves code snippet which refers to various language features that allocate to
actual test to ensure better functionality coverage.
---
 src/rt/tracegc.d                 | 66 +-------------------------------
 test/profile/myprofilegc.log.exp | 17 +++++++-
 test/profile/src/profilegc.d     | 47 ++++++++++++++++++++++-
 3 files changed, 64 insertions(+), 66 deletions(-)

diff --git a/src/rt/tracegc.d b/src/rt/tracegc.d
index 0780410..3d17b00 100644
--- a/src/rt/tracegc.d
+++ b/src/rt/tracegc.d
@@ -3,6 +3,8 @@
  *   -profile=gc
  * switch is thrown.
  *
+ * Tests for this functionality can be found in test/profile/src/profilegc.d
+ *
  * Copyright: Copyright Digital Mars 2015 - 2015.
  * License: Distributed under the
  *      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).
@@ -15,70 +17,6 @@ module rt.tracegc;

 // version = tracegc;

-version (none)
-{
-    // this exercises each function
-
-    struct S { ~this() { } }
-    class C { }
-    interface I { }
-
-    void main()
-    {
-      {
-        auto a = new C();
-        auto b = new int;
-        auto c = new int[3];
-        auto d = new int[][](3,4);
-        auto e = new float;
-        auto f = new float[3];
-        auto g = new float[][](3,4);
-      }
-        printf("\n");
-      {
-        int[] a; delete a;
-        S[] as; delete as;
-        C c; delete c;
-        I i; delete i;
-        C* pc = &c; delete *pc;
-        I* pi = &i; delete *pi;
-        int* pint; delete pint;
-        S* ps; delete ps;
-      }
-        printf("\n");
-      {
-        int[] a = [1, 2, 3];
-        string[int] aa = [1:"one", 2:"two", 3:"three"];
-      }
-        printf("\n");
-      {
-        int[] a, b, c;
-        c = a ~ b;
-        c = a ~ b ~ c;
-      }
-        printf("\n");
-      {
-        dchar dc = 'a';
-        char[] ac; ac ~= dc;
-        wchar[] aw; aw ~= dc;
-        char[] ac2; ac2 ~= ac;
-        int[] ai; ai ~= 3;
-      }
-        printf("\n");
-      {
-        int[] ai; ai.length = 10;
-        float[] af; af.length = 10;
-      }
-        printf("\n");
-        int v;
-      {
-        int foo() { return v; }
-        static int delegate() dg;
-        dg = &foo;      // dynamic closure
-      }
-    }
-}
-
 extern (C) Object _d_newclass(const ClassInfo ci);
 extern (C) void[] _d_newarrayT(const TypeInfo ti, size_t length);
 extern (C) void[] _d_newarrayiT(const TypeInfo ti, size_t length);
diff --git a/test/profile/myprofilegc.log.exp b/test/profile/myprofilegc.log.exp
index 9d36ec5..f356148 100644
--- a/test/profile/myprofilegc.log.exp
+++ b/test/profile/myprofilegc.log.exp
@@ -1,2 +1,17 @@
 bytes allocated, allocations, type, function, file:line
-             16	              1	uint D main src/profilegc.d:6
+            288	              1	immutable(char)[][int] D main src/profilegc.d:34
+            160	              1	float[][] D main src/profilegc.d:18
+            160	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:53
+             64	              1	int[] D main src/profilegc.d:52
+             32	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	char[] D main src/profilegc.d:45
+             16	              1	char[] D main src/profilegc.d:47
+             16	              1	closure profilegc.main.foo src/profilegc.d:56
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:33
+             16	              1	int[] D main src/profilegc.d:48
+             16	              1	wchar[] D main src/profilegc.d:46
diff --git a/test/profile/src/profilegc.d b/test/profile/src/profilegc.d
index 25e76fb..10f6303 100644
--- a/test/profile/src/profilegc.d
+++ b/test/profile/src/profilegc.d
@@ -3,5 +3,50 @@ import core.runtime;
 void main(string[] args)
 {
     profilegc_setlogfilename(args[1]);
-    auto p = new uint;
+
+    struct S { ~this() { } }
+    class C { }
+    interface I { }
+
+    {
+        auto a = new C();
+        auto b = new int;
+        auto c = new int[3];
+        auto d = new int[][](3,4);
+        auto e = new float;
+        auto f = new float[3];
+        auto g = new float[][](3,4);
+    }
+
+    {
+        int[] a = [1, 2, 3];
+        string[int] aa = [1:"one", 2:"two", 3:"three"];
+    }
+
+    {
+        int[] a, b, c;
+        c = a ~ b;
+        c = a ~ b ~ c;
+    }
+
+    {
+        dchar dc = 'a';
+        char[] ac; ac ~= dc;
+        wchar[] aw; aw ~= dc;
+        char[] ac2; ac2 ~= ac;
+        int[] ai; ai ~= 3;
+    }
+
+    {
+        int[] ai; ai.length = 10;
+        float[] af; af.length = 10;
+    }
+
+    auto foo ( )
+    {
+        int v = 42;
+        return { return v; };
+    }
+
+    auto x = foo()();
 }
--
2.18.0


From 950412b871de8144cb34e1faf7128d127d31e0c8 Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Mon, 19 Jun 2017 14:15:02 +0200
Subject: [PATCH 6/9] Use platform-specific expected logs for profile=gc tests

---
 test/profile/Makefile                          |  2 +-
 test/profile/myprofilegc.log.freebsd.32.exp    | 17 +++++++++++++++++
 ....log.exp => myprofilegc.log.freebsd.64.exp} | 18 +++++++++---------
 test/profile/myprofilegc.log.linux.32.exp      | 17 +++++++++++++++++
 test/profile/myprofilegc.log.linux.64.exp      | 17 +++++++++++++++++
 test/profile/myprofilegc.log.osx.32.exp        | 17 +++++++++++++++++
 test/profile/myprofilegc.log.osx.64.exp        | 17 +++++++++++++++++
 7 files changed, 95 insertions(+), 10 deletions(-)
 create mode 100644 test/profile/myprofilegc.log.freebsd.32.exp
 rename test/profile/{myprofilegc.log.exp => myprofilegc.log.freebsd.64.exp} (57%)
 create mode 100644 test/profile/myprofilegc.log.linux.32.exp
 create mode 100644 test/profile/myprofilegc.log.linux.64.exp
 create mode 100644 test/profile/myprofilegc.log.osx.32.exp
 create mode 100644 test/profile/myprofilegc.log.osx.64.exp

diff --git a/test/profile/Makefile b/test/profile/Makefile
index 3f56c05..fa6c1b4 100644
--- a/test/profile/Makefile
+++ b/test/profile/Makefile
@@ -23,7 +23,7 @@ $(ROOT)/profilegc.done: $(ROOT)/%.done: $(ROOT)/%
 	@echo Testing $*
 	@rm -f $(ROOT)/myprofilegc.log
 	$(QUIET)$(TIMELIMIT)$(ROOT)/$* $(ROOT)/myprofilegc.log
-	$(QUIET)$(DIFF) myprofilegc.log.exp $(ROOT)/myprofilegc.log
+	$(QUIET)$(DIFF) myprofilegc.log.$(OS).$(MODEL).exp $(ROOT)/myprofilegc.log
 	@touch $@

 $(ROOT)/both.done: DFLAGS+=-profile -profile=gc
diff --git a/test/profile/myprofilegc.log.freebsd.32.exp b/test/profile/myprofilegc.log.freebsd.32.exp
new file mode 100644
index 0000000..ba1a3d1
--- /dev/null
+++ b/test/profile/myprofilegc.log.freebsd.32.exp
@@ -0,0 +1,17 @@
+bytes allocated, allocations, type, function, file:line
+            176	              1	immutable(char)[][int] D main src/profilegc.d:23
+            128	              1	float[][] D main src/profilegc.d:18
+            128	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	wchar[] D main src/profilegc.d:35
diff --git a/test/profile/myprofilegc.log.exp b/test/profile/myprofilegc.log.freebsd.64.exp
similarity index 57%
rename from test/profile/myprofilegc.log.exp
rename to test/profile/myprofilegc.log.freebsd.64.exp
index f356148..f54a48b 100644
--- a/test/profile/myprofilegc.log.exp
+++ b/test/profile/myprofilegc.log.freebsd.64.exp
@@ -1,17 +1,17 @@
 bytes allocated, allocations, type, function, file:line
-            288	              1	immutable(char)[][int] D main src/profilegc.d:34
+            288	              1	immutable(char)[][int] D main src/profilegc.d:23
             160	              1	float[][] D main src/profilegc.d:18
             160	              1	int[][] D main src/profilegc.d:15
-             64	              1	float[] D main src/profilegc.d:53
-             64	              1	int[] D main src/profilegc.d:52
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
              32	              1	profilegc.main.C D main src/profilegc.d:12
-             16	              1	char[] D main src/profilegc.d:45
-             16	              1	char[] D main src/profilegc.d:47
-             16	              1	closure profilegc.main.foo src/profilegc.d:56
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
              16	              1	float D main src/profilegc.d:16
              16	              1	float[] D main src/profilegc.d:17
              16	              1	int D main src/profilegc.d:13
              16	              1	int[] D main src/profilegc.d:14
-             16	              1	int[] D main src/profilegc.d:33
-             16	              1	int[] D main src/profilegc.d:48
-             16	              1	wchar[] D main src/profilegc.d:46
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	wchar[] D main src/profilegc.d:35
diff --git a/test/profile/myprofilegc.log.linux.32.exp b/test/profile/myprofilegc.log.linux.32.exp
new file mode 100644
index 0000000..ba1a3d1
--- /dev/null
+++ b/test/profile/myprofilegc.log.linux.32.exp
@@ -0,0 +1,17 @@
+bytes allocated, allocations, type, function, file:line
+            176	              1	immutable(char)[][int] D main src/profilegc.d:23
+            128	              1	float[][] D main src/profilegc.d:18
+            128	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	wchar[] D main src/profilegc.d:35
diff --git a/test/profile/myprofilegc.log.linux.64.exp b/test/profile/myprofilegc.log.linux.64.exp
new file mode 100644
index 0000000..f54a48b
--- /dev/null
+++ b/test/profile/myprofilegc.log.linux.64.exp
@@ -0,0 +1,17 @@
+bytes allocated, allocations, type, function, file:line
+            288	              1	immutable(char)[][int] D main src/profilegc.d:23
+            160	              1	float[][] D main src/profilegc.d:18
+            160	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
+             32	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	wchar[] D main src/profilegc.d:35
diff --git a/test/profile/myprofilegc.log.osx.32.exp b/test/profile/myprofilegc.log.osx.32.exp
new file mode 100644
index 0000000..ba1a3d1
--- /dev/null
+++ b/test/profile/myprofilegc.log.osx.32.exp
@@ -0,0 +1,17 @@
+bytes allocated, allocations, type, function, file:line
+            176	              1	immutable(char)[][int] D main src/profilegc.d:23
+            128	              1	float[][] D main src/profilegc.d:18
+            128	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	wchar[] D main src/profilegc.d:35
diff --git a/test/profile/myprofilegc.log.osx.64.exp b/test/profile/myprofilegc.log.osx.64.exp
new file mode 100644
index 0000000..f54a48b
--- /dev/null
+++ b/test/profile/myprofilegc.log.osx.64.exp
@@ -0,0 +1,17 @@
+bytes allocated, allocations, type, function, file:line
+            288	              1	immutable(char)[][int] D main src/profilegc.d:23
+            160	              1	float[][] D main src/profilegc.d:18
+            160	              1	int[][] D main src/profilegc.d:15
+             64	              1	float[] D main src/profilegc.d:42
+             64	              1	int[] D main src/profilegc.d:41
+             32	              1	profilegc.main.C D main src/profilegc.d:12
+             16	              1	char[] D main src/profilegc.d:34
+             16	              1	char[] D main src/profilegc.d:36
+             16	              1	closure profilegc.main.foo src/profilegc.d:45
+             16	              1	float D main src/profilegc.d:16
+             16	              1	float[] D main src/profilegc.d:17
+             16	              1	int D main src/profilegc.d:13
+             16	              1	int[] D main src/profilegc.d:14
+             16	              1	int[] D main src/profilegc.d:22
+             16	              1	int[] D main src/profilegc.d:37
+             16	              1	wchar[] D main src/profilegc.d:35
--
2.18.0


From 23257cfbf13c12d044ac1d5891b7773399c023c1 Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Wed, 21 Mar 2018 08:50:31 -0700
Subject: [PATCH 7/9] Remove possibly recursive usage of GC in profilegc

---
 src/rt/profilegc.d | 36 ++++++++++++++++++++++--------------
 1 file changed, 22 insertions(+), 14 deletions(-)

diff --git a/src/rt/profilegc.d b/src/rt/profilegc.d
index f84e1f3..757d551 100644
--- a/src/rt/profilegc.d
+++ b/src/rt/profilegc.d
@@ -20,15 +20,16 @@ import core.stdc.stdlib;
 import core.stdc.string;

 import core.exception : onOutOfMemoryError;
+import rt.util.container.hashtab;

 struct Entry { size_t count, size; }

 char[] buffer;
-Entry[string] newCounts;
+HashTab!(const(char)[], Entry) newCounts;

 __gshared
 {
-    Entry[string] globalNewCounts;
+    HashTab!(const(char)[], Entry) globalNewCounts;
     string logfilename = "profilegc.log";
 }

@@ -41,12 +42,11 @@ __gshared

 extern (C) void profilegc_setlogfilename(string name)
 {
-    logfilename = name;
+    logfilename = name ~ "\0";
 }

-
-
-public void accumulate(string file, uint line, string funcname, string type, size_t sz)
+public void accumulate(string file, uint line, string funcname, string type,
+    size_t sz) @nogc
 {
     char[3 * line.sizeof + 1] buf;
     auto buflen = snprintf(buf.ptr, buf.length, "%u", line);
@@ -55,10 +55,11 @@ public void accumulate(string file, uint line, string funcname, string type, siz
     if (length > buffer.length)
     {
         // Enlarge buffer[] so it is big enough
-        auto p = cast(char*)realloc(buffer.ptr, length);
+        assert(buffer.length > 0 || buffer.ptr is null);
+        auto p = cast(char*)realloc(buffer.ptr, length + 1);
         if (!p)
             onOutOfMemoryError();
-        buffer = p[0 .. length];
+        buffer = p[0 .. length + 1];
     }

     // "type funcname file:line"
@@ -72,6 +73,7 @@ public void accumulate(string file, uint line, string funcname, string type, siz
     buffer[type.length + 1 + funcname.length + 1 + file.length] = ':';
     buffer[type.length + 1 + funcname.length + 1 + file.length + 1 ..
            type.length + 1 + funcname.length + 1 + file.length + 1 + buflen] = buf[0 .. buflen];
+    buffer[length] = 0;

     if (auto pcount = cast(string)buffer[0 .. length] in newCounts)
     { // existing entry
@@ -79,7 +81,11 @@ public void accumulate(string file, uint line, string funcname, string type, siz
         pcount.size += sz;
     }
     else
-        newCounts[buffer[0..length].idup] = Entry(1, sz); // new entry
+    {
+        auto key = (cast(char*) malloc(char.sizeof * length))[0 .. length];
+        key[] = buffer[0..length];
+        newCounts[key] = Entry(1, sz); // new entry
+    }
 }

 // Merge thread local newCounts into globalNewCounts
@@ -98,7 +104,7 @@ static ~this()
                 globalNewCounts[name].size += entry.size;
             }
         }
-        newCounts = null;
+        newCounts.reset();
     }
     free(buffer.ptr);
     buffer = null;
@@ -109,7 +115,7 @@ shared static ~this()
 {
     static struct Result
     {
-        string name;
+        const(char)[] name;
         Entry entry;

         // qsort() comparator to sort by count field
@@ -130,7 +136,10 @@ shared static ~this()
         }
     }

-    Result[] counts = new Result[globalNewCounts.length];
+    size_t size = globalNewCounts.length;
+    Result[] counts = (cast(Result*) malloc(size * Result.sizeof))[0 .. size];
+    scope(exit)
+        free(counts.ptr);

     size_t i;
     foreach (name, entry; globalNewCounts)
@@ -143,8 +152,7 @@ shared static ~this()
     if (counts.length)
     {
         qsort(counts.ptr, counts.length, Result.sizeof, &Result.qsort_cmp);
-
-        FILE* fp = logfilename.length == 0 ? stdout : fopen((logfilename ~ '\0').ptr, "w");
+        FILE* fp = logfilename.length == 0 ? stdout : fopen((logfilename).ptr, "w");
         if (fp)
         {
             fprintf(fp, "bytes allocated, allocations, type, function, file:line\n");
--
2.18.0


From f653dc370ab72099fdd9c4de9485de2cb662fe9f Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Wed, 21 Mar 2018 11:37:22 -0700
Subject: [PATCH 8/9] Do not accumulate empty entries

---
 src/rt/profilegc.d | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/src/rt/profilegc.d b/src/rt/profilegc.d
index 757d551..e21245a 100644
--- a/src/rt/profilegc.d
+++ b/src/rt/profilegc.d
@@ -48,6 +48,9 @@ extern (C) void profilegc_setlogfilename(string name)
 public void accumulate(string file, uint line, string funcname, string type,
     size_t sz) @nogc
 {
+    if (sz == 0)
+        return;
+
     char[3 * line.sizeof + 1] buf;
     auto buflen = snprintf(buf.ptr, buf.length, "%u", line);

--
2.18.0


From 35aebdec5f8c3a5d10f1b65c43fe1359bb8b640b Mon Sep 17 00:00:00 2001
From: Mihails Strasuns <mihails.strasuns.contractor@sociomantic.com>
Date: Tue, 10 Apr 2018 12:04:32 +0100
Subject: [PATCH 9/9] Do not use delegate in generated trace mixin

Causes closure allocation despite being marked as scope
---
 src/rt/tracegc.d | 11 ++++-------
 1 file changed, 4 insertions(+), 7 deletions(-)

diff --git a/src/rt/tracegc.d b/src/rt/tracegc.d
index 3d17b00..2c7041a 100644
--- a/src/rt/tracegc.d
+++ b/src/rt/tracegc.d
@@ -44,8 +44,7 @@ extern (C) void[] _d_arraysetlengthT(const TypeInfo ti, size_t newlength, void[]
 extern (C) void[] _d_arraysetlengthiT(const TypeInfo ti, size_t newlength, void[]* p);
 extern (C) void* _d_allocmemory(size_t sz);

-// Used as wrapper function body to get actual stats. Calling `original_func()`
-// will call wrapped function with all required arguments.
+// Used as wrapper function body to get actual stats.
 //
 // Placed here as a separate string constant to simplify maintenance as it is
 // much more likely to be modified than rest of generation code.
@@ -87,8 +86,6 @@ enum accumulator = q{
         if (size > 0)
             accumulate(file, line, funcname, name, size);
     }
-
-    return original_func();
 };

 mixin(generateTraceWrappers());
@@ -139,12 +136,12 @@ private string generateWrapper(alias Declaration)()
     auto new_declaration = type_string[0 .. param_idx] ~ " " ~ name
         ~ "Trace(string file, int line, string funcname, "
         ~ type_string[param_idx+1 .. $];
-    auto call_original = "    scope original_func = { return "
-        ~ __traits(identifier, Declaration) ~ "(" ~ Arguments!Declaration() ~ "); };";
+    auto call_original = "return "
+        ~ __traits(identifier, Declaration) ~ "(" ~ Arguments!Declaration() ~ ");";

     return new_declaration ~ "\n{\n" ~
-           call_original ~ "\n" ~
            accumulator ~ "\n" ~
+           call_original ~ "\n" ~
            "}\n";
 }

--
2.18.0

