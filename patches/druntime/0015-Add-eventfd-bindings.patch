From 7268c1665cee6af3d9432e673c25fb651fe8a05c Mon Sep 17 00:00:00 2001
From: Nemanja Boric <nemanja.boric@sociomantic.com>
Date: Tue, 4 Apr 2017 15:27:57 +0200
Subject: [PATCH 15/18] Add eventfd bindings

This adds bindings for linux-specific eventfd_* calls.

Cherry-pick of https://github.com/dlang/druntime/pull/1800/commits/0748d402f4dcff657eecc4f383acc9b4a9641de5
---
 mak/COPY                         |  1 +
 src/core/sys/linux/sys/eventfd.d | 85 ++++++++++++++++++++++++++++++++++++++++
 win32.mak                        |  3 ++
 win64.mak                        |  3 ++
 4 files changed, 92 insertions(+)
 create mode 100644 src/core/sys/linux/sys/eventfd.d

diff --git a/mak/COPY b/mak/COPY
index 089c6789..05caa3aa 100644
--- a/mak/COPY
+++ b/mak/COPY
@@ -76,6 +76,7 @@ COPY=\
 	$(IMPDIR)\core\sys\linux\tipc.d \
 	$(IMPDIR)\core\sys\linux\unistd.d \
 	\
+	$(IMPDIR)\core\sys\linux\sys\eventfd.d \
 	$(IMPDIR)\core\sys\linux\sys\inotify.d \
 	$(IMPDIR)\core\sys\linux\sys\mman.d \
 	$(IMPDIR)\core\sys\linux\sys\netinet\tcp.d \
diff --git a/src/core/sys/linux/sys/eventfd.d b/src/core/sys/linux/sys/eventfd.d
new file mode 100644
index 00000000..f0e56195
--- /dev/null
+++ b/src/core/sys/linux/sys/eventfd.d
@@ -0,0 +1,85 @@
+/**
+ * D header file for GNU/Linux.
+ *
+ * License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)
+ * Authors:   Nemanja Boric
+ */
+module core.sys.linux.sys.eventfd;
+
+version (linux):
+extern (C):
+@nogc:
+@system:
+nothrow:
+
+import core.stdc.stdint: uint64_t;
+
+/// Type for the event counter
+alias uint64_t eventfd_t;
+
+/* Return file descriptor for generic event channel.  Set initial
+   value to count.  */
+int eventfd (uint count, int flags);
+
+/* Read event counter and possibly wait for events.  */
+int eventfd_read (int fd, eventfd_t* value);
+
+/* Increment event counter.  */
+int eventfd_write (int fd, eventfd_t value);
+
+version (X86)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (X86_64)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (MIPS32)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x80; // octal!200
+}
+else version (MIPS64)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x80; // octal!200
+}
+else version (PPC)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (PPC64)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (ARM)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (AArch64)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else version (SystemZ)
+{
+    enum EFD_SEMAPHORE = 1;
+    enum EFD_CLOEXEC = 0x80000; // octal!2000000
+    enum EFD_NONBLOCK = 0x800; // octal!4000
+}
+else
+    static assert(0, "unimplemented");
diff --git a/win32.mak b/win32.mak
index 57b1403a..570bb3e2 100644
--- a/win32.mak
+++ b/win32.mak
@@ -424,6 +424,9 @@ $(IMPDIR)\core\sys\linux\tipc.d : src\core\sys\linux\tipc.d
 $(IMPDIR)\core\sys\linux\unistd.d : src\core\sys\linux\unistd.d
 	copy $** $@
 
+$(IMPDIR)\core\sys\linux\sys\eventfd.d : src\core\sys\linux\sys\eventfd.d
+	copy $** $@
+
 $(IMPDIR)\core\sys\linux\sys\inotify.d : src\core\sys\linux\sys\inotify.d
 	copy $** $@
 
diff --git a/win64.mak b/win64.mak
index bbe17903..97d0fd2f 100644
--- a/win64.mak
+++ b/win64.mak
@@ -432,6 +432,9 @@ $(IMPDIR)\core\sys\linux\tipc.d : src\core\sys\linux\tipc.d
 $(IMPDIR)\core\sys\linux\unistd.d : src\core\sys\linux\unistd.d
 	copy $** $@
 
+$(IMPDIR)\core\sys\linux\sys\eventfd.d : src\core\sys\linux\sys\eventfd.d
+	copy $** $@
+
 $(IMPDIR)\core\sys\linux\sys\inotify.d : src\core\sys\linux\sys\inotify.d
 	copy $** $@
 
-- 
2.14.1

